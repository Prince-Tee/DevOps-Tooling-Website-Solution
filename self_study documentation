## DevOps Tooling Website Solution - 101

This self-study documentation outlines the step-by-step process of setting up a **DevOps Tooling Website Solution** using **NFS (Network File System)** for shared storage and **MySQL** for a centralized database. The solution consists of three web servers, each using a shared file system and database for seamless operations. This document also covers some challenges encountered during the setup and how they were resolved.

---

### Table of Contents
1. [Objective](#objective)
2. [Prerequisites](#prerequisites)
3. [Step 1: Prepare the NFS Server](#step-1-prepare-the-nfs-server)
4. [Step 2: Configure the MySQL Database Server](#step-2-configure-the-database-server)
5. [Step 3: Prepare the Web Servers](#step-3-prepare-the-web-servers)
6. [Challenges Faced](#challenges-faced)
7. [Conclusion](#conclusion)

---

### Objective
The goal of this project is to set up a web solution for the DevOps team, utilizing shared NFS storage and a centralized MySQL database. The website will be hosted on three web servers, with the content served from a shared storage solution. We will configure the following components:
- **NFS Server** for shared storage
- **MySQL Server** for the database
- **Apache** on multiple web servers with shared content and logs

---

### Prerequisites
Before beginning the task, ensure you have the following:
- **AWS Account** to launch EC2 instances
- **SSH access** to the EC2 instances
- **Basic understanding of LVM (Logical Volume Manager)**, NFS, MySQL, and Apache
- A VPC with a shared subnet for the instances

---

### Step 1: Prepare the NFS Server

#### 1.1 Launch EC2 Instance
- **Instance Type**: RHEL 8 Linux
- **Role**: NFS server

#### 1.2 Configure LVM
Create three logical volumes for the NFS server:
- **lv-apps**: For storing web application files.
- **lv-logs**: For storing logs from the web servers.
- **lv-opt**: For future use (e.g., Jenkins server).

Steps:
1. Create physical volumes:  
   ```bash
   sudo pvcreate /dev/xvdf /dev/xvdg /dev/xvdh
   ```
2. Create volume group:  
   ```bash
   sudo vgcreate vg_data /dev/xvdf /dev/xvdg /dev/xvdh
   ```
3. Create logical volumes:  
   ```bash
   sudo lvcreate -L 5G -n lv-apps vg_data
   sudo lvcreate -L 5G -n lv-logs vg_data
   sudo lvcreate -L 5G -n lv-opt vg_data
   ```

#### 1.3 Format the Logical Volumes as XFS
   ```bash
   sudo mkfs.xfs /dev/vg_data/lv-apps
   sudo mkfs.xfs /dev/vg_data/lv-logs
   sudo mkfs.xfs /dev/vg_data/lv-opt
   ```

#### 1.4 Mount the Logical Volumes
Mount the volumes in the `/mnt` directory for web applications, logs, and Jenkins:
```bash
sudo mkdir /mnt/apps /mnt/logs /mnt/opt
sudo mount /dev/vg_data/lv-apps /mnt/apps
sudo mount /dev/vg_data/lv-logs /mnt/logs
sudo mount /dev/vg_data/lv-opt /mnt/opt
```

#### 1.5 Install and Configure NFS Server
Install **NFS utilities**:
```bash
sudo yum install nfs-utils -y
sudo systemctl start nfs-server
sudo systemctl enable nfs-server
```

#### 1.6 Export NFS Mount Points
Configure NFS export permissions for the subnet:
```bash
sudo vi /etc/exports

/mnt/apps <Subnet-CIDR>(rw,sync,no_all_squash,no_root_squash)
/mnt/logs <Subnet-CIDR>(rw,sync,no_all_squash,no_root_squash)
/mnt/opt <Subnet-CIDR>(rw,sync,no_all_squash,no_root_squash)
```

Export the configurations:
```bash
sudo exportfs -arv
```

#### 1.7 Open Required Ports
Open NFS-related ports in your **Security Group**:
- TCP/UDP 111
- UDP 2049

---

### Step 2: Configure the Database Server

#### 2.1 Launch EC2 Instance
- **Instance Type**: RHEL 8 Linux
- **Role**: MySQL Database Server

#### 2.2 Install MySQL
Install MySQL server and secure it:
```bash
sudo yum install mysql-server -y
sudo systemctl start mysqld
sudo systemctl enable mysqld
```

#### 2.3 Create the Database and User
Create the **tooling** database and the **webaccess** user for web server access:
```bash
mysql -u root -p
CREATE DATABASE tooling;
CREATE USER 'webaccess'@'<web-servers-subnet>' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON tooling.* TO 'webaccess'@'<web-servers-subnet>';
```

---

### Step 3: Prepare the Web Servers

#### 3.1 Launch Three EC2 Instances
- **Instance Type**: RHEL 8 Linux
- **Role**: Web Servers (3 instances)

#### 3.2 Install NFS Client and Mount NFS Shares
On each web server:
1. Install NFS client:  
   ```bash
   sudo yum install nfs-utils nfs4-acl-tools -y
   ```

2. Mount NFS share for `/var/www`:  
   ```bash
   sudo mkdir /var/www
   sudo mount -t nfs <NFS-Server-IP>:/mnt/apps /var/www
   ```

3. Verify the mount:  
   ```bash
   df -h
   ```

4. Add to `/etc/fstab` to persist mounts after reboot:
   ```bash
   <NFS-Server-IP>:/mnt/apps /var/www nfs defaults 0 0
   ```

#### 3.3 Install Apache and PHP
Install **Apache** and **PHP** on each web server:
```bash
sudo yum install httpd -y
sudo dnf module enable php:remi-7.4
sudo yum install php php-mysqlnd
sudo systemctl start httpd
sudo systemctl enable httpd
```

#### 3.4 Deploy Tooling Website
1. Fork and clone the **Tooling** repository:
   ```bash
   git clone https://github.com/<your-username>/tooling
   ```

2. Deploy the content to `/var/www/html`:
   ```bash
   sudo cp -r tooling/html/* /var/www/html/
   ```

3. Ensure correct file permissions:
   ```bash
   sudo chown -R apache:apache /var/www/html
   sudo chmod -R 755 /var/www/html
   ```

#### 3.5 Connect Website to Database
Update the `functions.php` file to point to the MySQL database:
```php
$servername = "<MySQL-Server-IP>";
$username = "webaccess";
$password = "password";
$dbname = "tooling";
```

#### 3.6 Verify the Website
Access the website using the **public IP** of any web server:
```
http://<web-server-public-ip>/index.php
```

Login with the newly created user:  
**Username**: `myuser`  
**Password**: `password`

---

### Challenges Faced

#### 1. **LVM Configuration**
Initially, there were issues configuring Logical Volumes, particularly ensuring enough disk space for each volume. This was resolved by allocating disks appropriately and verifying the volume sizes.

#### 2. **NFS Mount Permissions**
While mounting NFS shares, incorrect permissions initially prevented write access to the web servers. Changing the ownership of the directories to `nobody` and updating permissions to `777` allowed proper access.

#### 3. **403 Forbidden Error**
After setting up Apache, there was a `403 Forbidden` error due to SELinux restrictions. Disabling SELinux and ensuring proper file permissions on `/var/www/html` resolved the issue.

#### 4. **MySQL Remote Access**
Configuring MySQL to accept connections only from the web servers' subnet caused some issues, especially when forgetting to add the correct subnet CIDR. Double-checking the MySQL user access permissions and granting privileges resolved the problem.

#### 5. **Port Issues**
Ensuring the correct NFS and MySQL ports were open in the security groups required several adjustments. Running `rpcinfo -p` on the NFS server helped identify which ports needed to be opened.

---

### Conclusion

This project successfully demonstrates how to set up a web solution using **NFS for shared storage** and **MySQL for database management** across multiple web servers. By making the web servers stateless and using shared storage, we ensured scalability and fault tolerance, which is critical for DevOps environments.